@page "/userinfo"
@inject IHttpContextAccessor contextAccessor

@using Microsoft.Extensions.Logging
@inject ILogger<UserInfo> Logger

@inject DialogService DialogService
@inject NotificationService NotificationService


<PageTitle>Кабинет</PageTitle>
<RadzenCard>
    <h3>В системе работает пользователь <em>@LogonName</em></h3>
</RadzenCard>

<div class="row justify-content-center">
    <div class="col-sm-12 col-md-8 col-lg-6">
        <RadzenTemplateForm TItem="ReportUser" Data=@CurrentUser Submit="@((ReportUser currentUser) => { SubmitChanges(currentUser); })">
            <RadzenFieldset Text="Информация о пользователе">
                <div class="row row-cols-2">
                    <RadzenLabel class=col Component="FullName" Text="Полное имя" />
                    <RadzenTextBox class=col Name="FullName" @bind-Value=@CurrentUser.FullName/>
                </div>
                <p><RadzenRequiredValidator Component="FullName" Text="Необходимо ввести имя пользователя" /></p>

                <div class="row row-cols-2">
                    <RadzenLabel class=col Component="Email" Text="Адрес электронной почты" />
                    <RadzenTextBox class=col Name="Email" @bind-Value=@CurrentUser.Email/>
                    
                </div>
                <p>
                    <RadzenRequiredValidator Component="Email" Text="Нужно ввести адрес почты"/>
                    <RadzenEmailValidator Component="Email" Text="Адрес почты ввден некорректно!" />
                </p>

                <div class="row row-cols-2">
                    <RadzenLabel class=col Component="Region" Text="Обслуживаемые регионы"/>
                    <div class=col>
                        <RadzenButton class=col Text="Выбрать район" ButtonStyle="ButtonStyle.Secondary" Click=@SelectDistricts Visible=CurrentUser.IsApproved/>
                        <RadzenLabel class=text-info Text=@ServicingDistricts/>

                    </div>
                    
                </div>

                <div>
                    <div style="margin-top: 16px;">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Заявка на изменение" Visible=CurrentUser.IsApproved />
                    </div>
                </div>
            </RadzenFieldset>

        </RadzenTemplateForm>

    </div>
</div>

    

    

@code {


    private ReportUser CurrentUser { get; set; }
    private IQueryable<District> Districts { get; set; }

    /// <summary>
    /// Имя системного пользователя, определенное системой
    /// </summary>
    private string LogonName => contextAccessor?.HttpContext?.User?.Identity?.Name ?? "Не определено";

    /// <summary>
    /// Строка с перечнем районов, обслуживаемых пользователем
    /// </summary>
    private string ServicingDistricts { 
        get 
        {
            if (CurrentUser?.RelatedDistrict != null && CurrentUser.RelatedDistrictId != null)
                return CurrentUser.RelatedDistrict.DistrictName;
            else return "Не выбраны";
        }

    }

    protected override async Task OnInitializedAsync()
    {
        DialogService.Open<LoadingDialog>("Loading");

        Districts = db.Districts.GetAll();

        CurrentUser = await db.ReportUsers
                                .Find(u => u.WindowsUserName == LogonName)
                                .Include(u => u.RelatedDistrict).FirstOrDefaultAsync() ?? 
                      new ReportUser(){WindowsUserName = LogonName};
        //Если пользователь впервые вошёл - записываем его в БД
        if (CurrentUser.Id == 0) db.ReportUsers.Create(CurrentUser);

        DialogService.Close();

        //Включаю перерисовку при закрытии диалогового окна.
        DialogService.OnClose += (dynamic obj) => StateHasChanged();
        
    }


    /// <summary>
    /// Отправить заявку на изменение данных пользователя
    /// </summary>
    /// <param name="user"></param>
    private void SubmitChanges(ReportUser user)
    {

        try
        {
            //Пока заявка не утверждена - делаем пользователя неактивным
            user.IsApproved = false;
            CurrentUser = user;
            db.ReportUsers.Update(user);
            Logger.Log(LogLevel.Information, $"User info approve request - {user.WindowsUserName}");
            NotificationService.Notify(NotificationSeverity.Success, "Заявка отправлена успешно");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Ошибка обработки заявки");
            Logger.Log(LogLevel.Error, ex.GetBaseException().Message);
        }


    }

    //Вызов диалога для выбора обслуживаемых районов
    private void SelectDistricts()
    {
        DialogService.Open<RegionListDialog>("Обслуживаемые районы", new Dictionary<string, object>(){ { "CurrentUser", CurrentUser } });

    }
   

}
