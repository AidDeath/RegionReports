@page "/userinfo"

@using Microsoft.Extensions.Logging
@inject ILogger<UserInfo> Logger

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject UserService UserService


<PageTitle>Кабинет</PageTitle>
<RadzenCard>
    <h2>В системе работает пользователь <em>@currentUser?.WindowsUserName</em></h2>
</RadzenCard>

<div class="row justify-content-center">
    <div class="col-sm-12 col-md-8 col-lg-6">
        <RadzenTemplateForm TItem="ReportUser" Data=@tempUserData Submit="@((ReportUser currentUser) => { SubmitChanges(currentUser); })">
            <RadzenFieldset Text="Информация о пользователе">
                <div class="row row-cols-2">
                    <RadzenLabel class=col Component="FullName" Text="Полное имя" />
                    <RadzenTextBox class=col Name="FullName" @bind-Value=@tempUserData.FullName ReadOnly=@isUserDataReadOnly/>
                </div>
                <p><RadzenRequiredValidator Component="FullName" Text="Необходимо ввести имя пользователя" /></p>

                <div class="row row-cols-2">
                    <RadzenLabel class=col Component="Email" Text="Адрес электронной почты" />
                    <RadzenTextBox class=col Name="Email" @bind-Value=@tempUserData.Email ReadOnly=@isUserDataReadOnly/>
                    
                </div>
                <p>
                    <RadzenRequiredValidator Component="Email" Text="Нужно ввести адрес почты"/>
                    <RadzenEmailValidator Component="Email" Text="Адрес почты ввден некорректно!" />
                </p>

                <div class="row row-cols-2">
                    <RadzenLabel class=col Component="Region" Text="Обслуживаемые регионы"/>
                    <div class=col>
                        <h3><RadzenLabel class=text-primary Text=@relatedDistrictName/></h3>
                        @if (!string.IsNullOrEmpty(suggestedDistrictText))
                        {
                            <h3><RadzenLabel class=text-info Text=@suggestedDistrictText/></h3>
                        }
                        
                        <RadzenButton class=col Text="Выбрать район" ButtonStyle="ButtonStyle.Secondary" Click=@SelectDistricts Visible=!isUserDataReadOnly/>
                        
                    </div>
                    
                </div>

                <div>
                    <div style="margin-top: 16px;">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Заявка на утверждение" Visible=!isUserDataReadOnly />
                    </div>
                </div>
            </RadzenFieldset>

        </RadzenTemplateForm>

    </div>
</div>

<div class="row justify-content-center mt-3">
    <div class="col-sm-12 col-md-8 col-lg-6 m-3">
        <RadzenCard  Visible=isUnprocessedClaimsFound>
            <h3>Заявка на изменение данных ожидает обработки</h3>
            <h5 class="text-info">Предложенные изменения</h5>
            @if(suggestedName is not null)
            {
                <div class="row row-cols-2">
                    <div class="col-md-4">
                        <div>Имя</div>
                    </div>
                    <div class="col-md-8">
                        <b>@suggestedName</b>
                    </div>
                </div>
                
            }
            @if(suggestedEmail is not null)
            {
                <div class="row row-cols-2">
                    <div class="col-md-4">
                        <div>E-mail</div>
                    </div>
                    <div class="col-md-8">
                        <b>@suggestedEmail</b>
                    </div>
                </div>
                
            }
            @if(suggestedDistrictName is not null)
            {
                <div class="row row-cols-2">
                    <div class="col-md-4">
                        <div>Район</div>
                    </div>
                    <div class="col-md-8">
                        <b>@suggestedDistrictName</b>
                    </div>
                </div>
                
            }

        </RadzenCard>
    </div>
</div>

    

    

@code {


    private ReportUser? currentUser { get; set; }
    //-public District? SuggestedDistrict { get; set; }

    private string relatedDistrictName => currentUser?.RelatedDistrict?.DistrictName ?? "Не выбран";
    private bool isUnprocessedClaimsFound => unprocessedClaim is not null;
    private ReportUserApprovalClaim? unprocessedClaim { get; set; }

    /// <summary>
    /// Объект - прослойка для изменения данных пользователя
    /// </summary>
    private ReportUser tempUserData = new();

    private string? suggestedName { get; set; }
    private string? suggestedEmail { get; set; }
    private string? suggestedDistrictName { get; set; }

    // Редактирование запрещено, если пользователь не утвержден и есть необработанные заявки от него
    private bool isUserDataReadOnly => (!currentUser?.IsApproved ?? false) && (isUnprocessedClaimsFound);

    private string suggestedDistrictText => (tempUserData is not null && tempUserData.RelatedDistrict.DistrictName != currentUser.RelatedDistrict.DistrictName) 
    ? $"Замена на {tempUserData.RelatedDistrict.DistrictName}" 
    : string.Empty;


    protected override void OnInitialized()
    {
        //CurrentUser = UserService.GetCurrentUserModel();
        currentUser = UserService.GetCurrentUserWithClaims();
        tempUserData = new ReportUser()
            {
                FullName = currentUser.FullName,
                Email = currentUser.Email,
                RelatedDistrict = currentUser.RelatedDistrict
            };

        RetreiveUnprocessedClaim();

        //Включаю перерисовку при закрытии диалогового окна.
        DialogService.OnClose += (dynamic obj) => StateHasChanged();

    }


    /// <summary>
    /// Отправить заявку на изменение данных пользователя
    /// </summary>
    /// <param name="user"></param>
    private void SubmitChanges(ReportUser editedUserData)
    {

        try
        {
            currentUser.IsApproved = false;
            currentUser = UserService.CreateNewApprovalClaim(currentUser, editedUserData);


            Logger.Log(LogLevel.Information, $"User info approve request - {editedUserData.WindowsUserName}");
            NotificationService.Notify(NotificationSeverity.Success, "Заявка отправлена успешно");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Ошибка обработки заявки");
            Logger.Log(LogLevel.Error, ex.GetBaseException().Message);
        }
        finally
        {
            RetreiveUnprocessedClaim();
            StateHasChanged();
        }


    }

    //Вызов диалога для выбора обслуживаемых районов
    private void SelectDistricts()
    {
        DialogService.Open<RegionListDialog>("Обслуживаемые район", new Dictionary<string, object>(){
            {"CurrentUser", tempUserData }
        });

    }


    private void RetreiveUnprocessedClaim(){
        
        unprocessedClaim = currentUser.UserApprovalClaims?.FirstOrDefault(c => !c.IsClaimProcessed);
        if (unprocessedClaim is not null)
        {
            suggestedName = unprocessedClaim.ReportUserSuggestedChanges.FullName;
            suggestedEmail = unprocessedClaim.ReportUserSuggestedChanges.Email;
            suggestedDistrictName = unprocessedClaim.ReportUserSuggestedChanges.RelatedDistrict.DistrictName;
        }
    }
   

}
