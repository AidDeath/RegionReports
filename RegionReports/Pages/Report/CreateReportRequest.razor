@page "/createreportrequest"
@using RegionReports.Enums
@using System.Text.Json
@inject ReportRequestService ReportRequestService
@inject FileService FileService
@inject NotificationService NotificationService
@inject SettingsService SettingsService
@inject DistrictService DistrictService;
@inject DialogService DialogService
@inject AssignmentService  AssignmentService
@inject NavigationManager NavigationManager


<PageTitle>Новый запрос данных</PageTitle>

<RadzenSteps Change="OnStepChange" NextText="Далее" PreviousText="Назад" >
    <Steps>
        <RadzenStepsItem Text="Выбор вида запроса">
            <RadzenDropDown TValue="KeyValuePair<int, string>" Placeholder="Вид отчета" Data="@DropDownText" TextProperty="Value" 
            SelectedItemChanged="@DropDownChanged"/>

            <RadzenButton />
        </RadzenStepsItem>
        <RadzenStepsItem Text="Данные запроса">
            @switch (reportRequestType)
            {
                //Выбран тип отчета - опрос
                case ReportRequestType.SurveyReport:
                    @if (SurveyRequest is not null)
                    {
                        <RadzenCard >
                            <div class="row">
                                <div class="col-md-6 col-lg-6">
                                @*Шапка опроса*@
                                 <RadzenLabel Text="Заголовок" Component="SurveyRequestTitle"/>
                                <RadzenTextBox class="m-2" Name="SurveyRequestTitle" @bind-Value="@SurveyRequest.RequestTitle"/>
                                <RadzenCard >
                                    <div class="row">
                                        <div>
                                            <h4 class="mb-3">Текст запроса: </h4>
                                            <RadzenHtmlEditor @bind-Value="@SurveyRequest.RequestText" style="height: 400px; margin-bottom: 1rem;">
                                                    <RadzenHtmlEditorUndo Title="Отменить"/>
                                                    <RadzenHtmlEditorRedo Title="Повторить"/>
                                                    <RadzenHtmlEditorFontName Title="Шрифт"/>
                                                    <RadzenHtmlEditorFontSize Title="Размер шрифта"/>
                                                    <RadzenHtmlEditorSeparator/>
                                                    <RadzenHtmlEditorAlignLeft Title="По левому краю"/>
                                                    <RadzenHtmlEditorAlignCenter Title="По центру"/>
                                                    <RadzenHtmlEditorAlignRight Title="По правому краю"/>
                                                    <RadzenHtmlEditorSeparator/>
                                                    <RadzenHtmlEditorBold Title="Жирный"/>
                                                    <RadzenHtmlEditorItalic Title="Курсив"/>
                                                    <RadzenHtmlEditorUnderline Title="Подчеркнутый"/>
                                                    <RadzenHtmlEditorStrikeThrough Title="Зачеркнутый"/>
                                                    <RadzenHtmlEditorSeparator />
                                                    <RadzenHtmlEditorColor Title="Цвет шрифта"/>
                                                    <RadzenHtmlEditorBackground Title="Заливка"/>
                                                    <RadzenHtmlEditorRemoveFormat Title="Очистить форматирование" />
                                            </RadzenHtmlEditor>
                                        </div>                            
                                    </div>
                                
                                </RadzenCard>
                                </div>

                                <div class="col-md-6 col-lg-6">
                                @*Опции опроса*@
                                    <div class="row m-2">
                                            <div class=col><h5>Выбор нескольких вариантов</h5></div>
                                            <div class=col><RadzenSwitch class=align-top @bind-Value=@SurveyRequest.MultipleChoises/></div>
                                    </div>                                  
                                <RadzenCard>
                                    <div class="p-1">
                                        <h4 class="mb-3">Варианты ответа</h4>
                                        @foreach (var opt in SurveyRequest.Options)
                                        {
                                            <div class="row mb-1">
                                                <div class="col-2"><RadzenIcon Icon="task_alt"></RadzenIcon> </div>
                                                <div class="col-8">@opt.OptionName</div>
                                                <div class="col-2"><RadzenButton Icon="delete_forever" Click="@(() => SurveyRequest.Options.Remove(opt))"/></div>
                                            </div>
                                        }
                                        @if (isAddOptionButtonVisible)
                                        {
                                            <div class="row">
                                                <div class="col-2"><RadzenIcon Icon="add"></RadzenIcon> </div>
                                                <RadzenButton class="col-10" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="Добавить вариант" Click=@(() => isAddOptionButtonVisible = false)/>  
                                            </div>
                                        }
                                        else
                                        {
                                            <RadzenTemplateForm TItem ="ReportRequestSurveyOption" Data="@inputtingOption"  Submit="AddSurveyOption">
                                                    <RadzenTextBox Placeholder="Текст варианта ответа" Name="TextBox" @bind-Value=@inputtingOption.OptionName/>
                                                    <RadzenButton ButtonType="ButtonType.Submit" Icon="check"/>
                                                    <RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Warning" Click=@(() => isAddOptionButtonVisible = true)/>

                                                <div class="row">
                                                    <RadzenRequiredValidator Text="Нужно ввести вариант ответа" Component="TextBox"/> 
                                                </div>
                                            </RadzenTemplateForm>

                                        }
                                    </div>
                                </RadzenCard>
                                </div>
                            </div>
                            @*<RadzenButton Text="Сохранить" Click="@( () => AddRequestSurvey())"/>*@
                        </RadzenCard>
                    }
                    break;
                //Выбран тип отчета - Простой текстовый запрос с возможностью прикрепить файл
                case ReportRequestType.TextOnlyReport:
                    <RadzenCard >
                         <div class="row">
                             <div class="col-sm-6 col-md-7 col-lg-8">
                                <RadzenLabel Text="Заголовок" Component="ReportRequestTitle"/>
                                <RadzenTextBox Name="ReportRequestTitle" @bind-Value="@TextRequest.RequestTitle"/>
                                 <h3>Текст запроса информации</h3>
                                <RadzenHtmlEditor @bind-Value="@TextRequest.RequestText" style="height: 400px; margin-bottom: 1rem;">
                                    <RadzenHtmlEditorUndo Title="Отменить"/>
                                    <RadzenHtmlEditorRedo Title="Повторить"/>
                                    <RadzenHtmlEditorFontName Title="Шрифт"/>
                                    <RadzenHtmlEditorFontSize Title="Размер шрифта"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorAlignLeft Title="По левому краю"/>
                                    <RadzenHtmlEditorAlignCenter Title="По центру"/>
                                    <RadzenHtmlEditorAlignRight Title="По правому краю"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorBold Title="Жирный"/>
                                    <RadzenHtmlEditorItalic Title="Курсив"/>
                                    <RadzenHtmlEditorUnderline Title="Подчеркнутый"/>
                                    <RadzenHtmlEditorStrikeThrough Title="Зачеркнутый"/>
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor Title="Цвет шрифта"/>
                                    <RadzenHtmlEditorBackground Title="Заливка"/>
                                    <RadzenHtmlEditorRemoveFormat Title="Очистить форматирование" />
                                </RadzenHtmlEditor>
                             </div>

                                 <div class="col-sm-6 col-md-5 col-lg-4">
                                     <h4>Прикрепленные файлы</h4>
                                     @if (@TextRequest.Files is not null)
                                        @foreach(var file in @TextRequest.Files)
                                        {
                                            <p>
                                                <RadzenButton class="m-1" Icon="delete" Click="@(() => RemoveFile(file))"/>
                                                <FileIcon FileType="@((UploadedFileType)file.FileType)"/>
                                               @file.FileOriginalName
                                            </p>
                                        }

                                    <RadzenUpload @ref="@upload" Url="upload/multiple"  ChooseText="Добавить файлы" Multiple=true Complete="@OnTextOnlyUploadComplete" Progress="@OnProgress" Visible=@(!progressVisible)
                                    Accept="@SettingsService.GetUploadableMimeTypes()" Error="@OnUploadError"/>
                                    @*Accept="application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/pdf"/>*@                         
                                    <RadzenProgressBar Visible="@progressVisible" Value="@uploadProgress"/>
                                </div>
                            </div>
                    </RadzenCard>
                    break;
                case ReportRequestType.FileReport:
                    <RadzenCard >
                         <div class="row">
                             <div class="col-sm-6 col-md-7 col-lg-8">
                                <RadzenLabel Text="Заголовок" Component="ReportRequestTitle"/>
                                <RadzenTextBox Name="ReportRequestTitle" @bind-Value="@FileRequest.RequestTitle"/>
                                 <h3>Текст запроса информации</h3>
                                <RadzenHtmlEditor @bind-Value="@FileRequest.RequestText" style="height: 400px; margin-bottom: 1rem;">
                                    <RadzenHtmlEditorUndo Title="Отменить"/>
                                    <RadzenHtmlEditorRedo Title="Повторить"/>
                                    <RadzenHtmlEditorFontName Title="Шрифт"/>
                                    <RadzenHtmlEditorFontSize Title="Размер шрифта"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorAlignLeft Title="По левому краю"/>
                                    <RadzenHtmlEditorAlignCenter Title="По центру"/>
                                    <RadzenHtmlEditorAlignRight Title="По правому краю"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorBold Title="Жирный"/>
                                    <RadzenHtmlEditorItalic Title="Курсив"/>
                                    <RadzenHtmlEditorUnderline Title="Подчеркнутый"/>
                                    <RadzenHtmlEditorStrikeThrough Title="Зачеркнутый"/>
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor Title="Цвет шрифта"/>
                                    <RadzenHtmlEditorBackground Title="Заливка"/>
                                    <RadzenHtmlEditorRemoveFormat Title="Очистить форматирование" />
                                </RadzenHtmlEditor>
                             </div>

                                 <div class="col-sm-6 col-md-5 col-lg-4">
                                     <h4>Файл - шаблон</h4>
                                    @if (@FileRequest.TemplateFile is not null)
                                    {
                                        <p>
                                            <RadzenButton class="m-1" Icon="delete" Click="@(() => RemoveFile(FileRequest.TemplateFile))"/>
                                            <FileIcon FileType="@((UploadedFileType)FileRequest.TemplateFile.FileType)"/>
                                            @FileRequest.TemplateFile.FileOriginalName
                                        </p>
                                    }

                                    <RadzenUpload @ref="@upload" Url="upload/singletemplate"  ChooseText="Выбрать файл" Multiple=false Complete="@OnFileReportUploadComplete" Progress="@OnProgress" Visible=@(!progressVisible)
                                    Accept="@SettingsService.GetUploadableMimeTypes()" Error="@OnUploadError"/>
                                    @*Accept="application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/pdf"/>*@                         
                                    <RadzenProgressBar Visible="@progressVisible" Value="@uploadProgress"/>
                                </div>
                            </div>
                    </RadzenCard>
                    break;
                default:
                    break;
            }
        </RadzenStepsItem>
        <RadzenStepsItem Text="Исполнители и расписание">
            <div class="row align-content-center">
                <div class="col-md-6 col-lg-6 align-items-center">
                    <RadzenFieldset Text="Назначение отчёта пользователям">
                        <RadzenDataGrid @ref="districtsDataGrid" AllowRowSelectOnRowClick="true" 
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="8"
                                        AllowSorting="true" Data="@Districts" TItem="District" ColumnWidth="200px"
                                        SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@SelectedDistricts>
                            <Columns>
                                <RadzenDataGridColumn TItem="District" Width="40px" Sortable="false" Filterable="false">
                                    <HeaderTemplate>
                                        <RadzenCheckBox TriState="false" TValue="bool" 
                                            Value="@(Districts.Any(i => SelectedDistricts != null && SelectedDistricts.Contains(i)))"
                                            Change="@(args => {SelectedDistricts = args ? Districts.ToList() : null;})" />
                                    </HeaderTemplate>
                                    <Template Context="data">
                                        <RadzenCheckBox TriState="false" Value="@(SelectedDistricts != null && SelectedDistricts.Contains(data))" 
                                            TValue="bool"/>
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="District" Property="DistrictName" Title="Район"  SortOrder="SortOrder.Ascending"/>
                                <RadzenDataGridColumn TItem="District" Property="ReportUser.FullName" Title="Представитель" />
                            </Columns>
                        </RadzenDataGrid>

                    </RadzenFieldset>
                </div>
                <div class="col-md-6 col-lg-6 align-items-center">
                    <RadzenFieldset Text="Периодичность сбора отчета">
                        
                        <RadzenSelectBar TValue="bool" @bind-Value="@isScheduledRequest">
                            <Items>
                                <RadzenSelectBarItem Text="Однократный запрос" Value="false" />
                                <RadzenSelectBarItem Text="Запрос по расписанию" Value="true" />
                            </Items>
                        </RadzenSelectBar>

                        @*Для однократного запроса*@
                        <RadzenCard Visible="@(!isScheduledRequest)">
                            <RadzenLabel Component="NonScheduledCalendar" Text="Дата" />
                            <RadzenDatePicker Name="NonScheduledCalendar" DateRender="@DateRenderNotBeforeToday" class="m-2"  TValue="DateTime" Inline="true" @bind-Value="@nonScheduledDeadline" />
                        
                            <RadzenLabel Component="NonSchedulledDeadline" Text="Время"/>
                            <RadzenDatePicker Name="NonSchedulledDeadline" AllowInput="false" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" TValue="DateTime" @bind-Value="@nonScheduledDeadline"/>
                        </RadzenCard>

                        @*Для запроса с расписанием*@
                        <RadzenCard Visible=@isScheduledRequest>
                            <ScheduleSettings RequestSchedule="@requestSchedule" @bind-ScheduledTime=@scheduledTime/>
                        </RadzenCard>
                        
                    </RadzenFieldset>
                </div>
            </div>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Готово">
                <p class="lead">Проверьте, всё ли верно</p>

                 <p class="@alertCssClass(isRequestTypeOk)" >
                   Тип отчета:  <b class="text-muted">@requestTypeCheckResult</b></p>
                
                <p class="@alertCssClass(isRequestTitleOk)" >
                Заголовок запроса:  <b class="text-muted">@requestTitleCheckResult</b></p>
                   
                <p class="@alertCssClass(isRequestTextOk)" >
                Текст запроса:  <b class="text-muted">@requestTextCheckResult</b></p>

            @if (reportRequestType == ReportRequestType.FileReport)
            {
                <p class="@alertCssClass(isTemplateFileLoaded)">
                    Файл-шаблон: <b class="text-muted">@templateFileLoadedCheckResult</b>
                </p>
            }

                @if (reportRequestType == ReportRequestType.SurveyReport)
                {
                        <p class="@alertCssClass(isSurveyOptionsOk)" >
                        Варианты ответа:  <b class="text-muted">@surveyOptionsCheckResult</b></p>
                }

                <p class="@alertCssClass(isDistrictAssignmentOk)" >
                Исполнители:  <b class="text-muted">@districtAssignmentCheckResult</b></p>

                @if (isScheduledRequest){
                <p class="@alertCssClass(isReportScheduleTypeOk)" >
                Расписание:  <b class="text-muted">@scheduleTypeCheckResult()</b></p>
                }
                else
                {
                <p class="alert alert-success">
                Срок отчета:  <b class="text-muted">@nonScheduledCheckResult</b></p>
                }

                <RadzenButton Text="Сохранить запрос" Disabled ="@isFinalCheckFailed()" Click="@(args => CommitReportRequest(args))" />

        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code {

    private ReportRequestType reportRequestType { get; set; }

    private static Dictionary<int, string> DropDownText = new Dictionary<int, string>
    {
        {(int)ReportRequestType.TextOnlyReport, "Запрос текстовой информмации"},
        {(int)ReportRequestType.SurveyReport, "Опрос"},
        {(int)ReportRequestType.FileReport, "Запрос файла"}
    };

    private void DropDownChanged(object selectedEntry)
    {
        var SelectedIndex = ((KeyValuePair<int, string>)selectedEntry).Key;
        reportRequestType = (ReportRequestType)SelectedIndex;

        if (reportRequestType == ReportRequestType.SurveyReport)
        {
            SurveyRequest = new(){ Options = new()};
            TextRequest = null;
            FileRequest = null;
        }


        if (reportRequestType == ReportRequestType.TextOnlyReport)
        {
            TextRequest = new() { Files = new() };
            SurveyRequest = null;
            FileRequest = null;
        }

        if (reportRequestType == ReportRequestType.FileReport)
        {
            FileRequest = new();
            SurveyRequest = null;
            TextRequest = null;
        }

    }

    #region Survey
    private bool isAddOptionButtonVisible { get; set; } = true;
    private ReportRequestSurvey? SurveyRequest { get; set; }
    private ReportRequestSurveyOption inputtingOption { get; set; } = new();


    /// <summary>
    /// Добавить новую опцию в запрос отчета-опроса
    /// </summary>
    /// <param name="newOption"></param>
    private void AddSurveyOption(ReportRequestSurveyOption newOption)
    {
        SurveyRequest?.Options.Add(new ReportRequestSurveyOption(){OptionName = newOption.OptionName});
        inputtingOption.OptionName = string.Empty;
        isAddOptionButtonVisible = true;
    }
    #endregion

    #region File
    private ReportRequestWithFile? FileRequest { get; set; }

    private void OnFileReportUploadComplete(UploadCompleteEventArgs args)
    {
        JsonDocument jsonDocument = args.JsonResponse;

        var uploadedFile = jsonDocument.RootElement.Deserialize<ReportRequestTemplateFile> ();

        if (uploadedFile is not null)
            FileRequest.TemplateFile = uploadedFile;

        upload.ClearFiles();
        progressVisible = false;

        NotificationService.Notify(NotificationSeverity.Success, "Файл загружен");
    }

    #endregion


    #region Text
    private ReportRequestText? TextRequest { get; set; }
    private RadzenUpload upload = new();
    private double uploadProgress;
    private bool progressVisible;

    private void OnProgress(UploadProgressArgs args)
    {
        if (args.Progress != 100) {
            progressVisible = true;
            uploadProgress = args.Progress;
        }

    }

    private void OnTextOnlyUploadComplete(UploadCompleteEventArgs args)
    {
        JsonDocument jsonDocument = args.JsonResponse;

        var uploadedFiles = jsonDocument.RootElement.Deserialize<List<ReportRequestFile>> ();

        if (uploadedFiles is not null && TextRequest?.Files is not null)
            TextRequest.Files.AddRange(uploadedFiles);

        upload.ClearFiles();
        progressVisible = false;

        NotificationService.Notify(NotificationSeverity.Success, "Файлы загружены");
    }


    private void OnUploadError(UploadErrorEventArgs args){
        NotificationService.Notify(NotificationSeverity.Error, "Ошибка при загрузке", args.Message);

        upload.ClearFiles();
        progressVisible = false;
    }

    /// <summary>
    /// Удалить файл из списка и с сервера
    /// </summary>
    /// <param name="file"></param>
    private void RemoveFile(ReportFileBase file)
    {
        if (TextRequest?.Files is not null) TextRequest.Files.Remove((ReportRequestFile)file);
        if (FileRequest?.TemplateFile is not null) FileRequest.TemplateFile = null;

        FileService.DeleteFileFromFileSystem(file);

        NotificationService.Notify(NotificationSeverity.Info, "Файл удален");
    }
    #endregion


    #region Scheduller

    private DateTime nonScheduledDeadline = DateTime.Now.Date.AddDays(1).AddHours(12).AddMinutes(30);

    private DateTime scheduledTime = default(DateTime).AddHours(12).AddMinutes(30);

    private ReportSchedule requestSchedule = new ReportSchedule() {
            DayOfMonth = 1,
            DayOfWeek = 1,
            Time = new TimeSpan(12, 30, 0)
    };

    //Ограничение для календаря, чтобы не рендерило прошлые даты
    void DateRenderNotBeforeToday(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date < DateTime.Today;
    }

    private bool isScheduledRequest {
        get {
            switch (reportRequestType){
                case ReportRequestType.SurveyReport:
                    return SurveyRequest?.IsSchedulledRequest ?? throw new NullReferenceException();
                case ReportRequestType.TextOnlyReport:
                    return TextRequest?.IsSchedulledRequest ?? throw new NullReferenceException();
                case ReportRequestType.FileReport:
                    return FileRequest?.IsSchedulledRequest ?? throw new NullReferenceException();
                default: throw new Exception("Не выбран тип отчета");
            }
        }
        set
        {
            switch (reportRequestType){
                case ReportRequestType.SurveyReport:
                    if (SurveyRequest is null) throw new NullReferenceException();
                    SurveyRequest.IsSchedulledRequest = value;
                    break;

                case ReportRequestType.TextOnlyReport:
                    if (TextRequest is null) throw new NullReferenceException();
                    TextRequest.IsSchedulledRequest = value;
                    break;

                case ReportRequestType.FileReport:
                    if (FileRequest is null) throw new NullReferenceException();
                    FileRequest.IsSchedulledRequest = value;
                    break;

                default: throw new Exception("Не выбран тип отчета");
            }
        }
    }


    #endregion

    #region District or user selection

    RadzenDataGrid<District>? districtsDataGrid;

    IEnumerable<District>? Districts;
    IList<District>? SelectedDistricts;


    #endregion


    #region FinalCheck
    private string alertCssClass(bool state) =>   (state) ? "alert alert-success" : "alert alert-danger";

    //Тип отчета
    private bool isRequestTypeOk => (int)reportRequestType != 0;
    private string requestTypeCheckResult => (isRequestTypeOk) ?  DropDownText[(int)reportRequestType] : "Не выбран тип отчета!";

    //Заголовок отчета
    private bool isRequestTitleOk =>  getRequestTitle() != string.Empty;
    private string requestTitleCheckResult => (isRequestTitleOk) ? getRequestTitle() : "Не указан заголовок отчета!"; 
    private string getRequestTitle()  {
        switch (reportRequestType)
        {
            case ReportRequestType.SurveyReport:
                return SurveyRequest?.RequestTitle ?? string.Empty;

            case ReportRequestType.TextOnlyReport:
                return TextRequest?.RequestTitle ?? string.Empty;

            case ReportRequestType.FileReport:
                return FileRequest?.RequestTitle ?? string.Empty;
        }
        return string.Empty;
    }

    //Текст запроса (опроса)
    private bool isRequestTextOk => getRequestText() != string.Empty;
    private string requestTextCheckResult => (isRequestTextOk) ? "Текст запроса введен" : "Не заполнен текст запроса!"; 
    private string getRequestText()
    {
        switch (reportRequestType)
        {
            case ReportRequestType.SurveyReport:
                return SurveyRequest?.RequestText ?? string.Empty;

            case ReportRequestType.TextOnlyReport:
                return TextRequest?.RequestText ?? string.Empty;

            case ReportRequestType.FileReport:
                return FileRequest?.RequestText ?? string.Empty;
        }
        return string.Empty;
    }

    //Варианты ответов для опроса
    private bool isSurveyOptionsOk => (SurveyRequest?.Options?.Count ?? 0) > 1;
    private string surveyOptionsCheckResult => (isSurveyOptionsOk) ? "Варианты ответов для опроса добавлены" : "Необходимо хотя бы два варианта ответа для опроса";

    //Назначение исполнителей
    private bool isDistrictAssignmentOk => (SelectedDistricts?.Count ?? 0) > 0;
    private string districtAssignmentCheckResult => (isDistrictAssignmentOk) ? $"{SelectedDistricts?.Select(d => d.DistrictName).Aggregate((a, b) => a + ", " + b)}" : "Не указано ни одного исполнителя!";

    //Периодичность - без расписания
    private string nonScheduledCheckResult => $"Без расписания, срок до {nonScheduledDeadline.Date:D} в {nonScheduledDeadline:t}";


    //Периодичность - с расписанием
    private bool isReportScheduleTypeOk => new[] { 1, 2, 3 }.Contains(requestSchedule.ScheduleType);
    //private bool isReportScheduleTypeOk => (new[] { 1, 2, 3 }.Contains(reportSchedule.ScheduleType) && ());

    private bool isTemplateFileLoaded => FileRequest.TemplateFile is not null;
    private string templateFileLoadedCheckResult => (isTemplateFileLoaded) ? FileRequest.TemplateFile.FileOriginalName : "Не загружен файл-шаблон для отчета";


    private string scheduleTypeCheckResult()
    {
        if (!isReportScheduleTypeOk) return "Выбран тип с расписанием, но расписание не указано";
        switch (requestSchedule.ScheduleType)
        {
            case 1:
                return $"Ежемесячно, не позднее {requestSchedule.DayOfMonth} числа, до {scheduledTime:t}";
            case 2:
                return $"Еженедельно, {daysDictionary[requestSchedule.DayOfWeek ?? 0]}, до {scheduledTime:t}";
            case 3:
                return $"Ежедневно до {scheduledTime:t}";
        }
        return string.Empty;
    }

    private Dictionary<short, string> daysDictionary = new() {
        { 1, "Понедельник" },
        { 2, "Вторник" }, 
        { 3, "Среда" }, 
        { 4, "Четверг" }, 
        { 5, "Пятница" }, 
        { 6, "Суббота" }, 
        { 7, "Воскресенье" }, 
    };

    private bool isFinalCheckFailed()
    {
        var final = isRequestTypeOk && isDistrictAssignmentOk && isRequestTitleOk && isRequestTextOk;

        if (reportRequestType == ReportRequestType.SurveyReport) 
            final = final && isSurveyOptionsOk;

        if (reportRequestType == ReportRequestType.FileReport)
            final = final && isTemplateFileLoaded;

        if (isScheduledRequest) final = final && isReportScheduleTypeOk;


        return !final;

    }

    #endregion



    private async Task CommitReportRequest(MouseEventArgs args)
    {
        requestSchedule.Time = new TimeSpan(scheduledTime.Hour, scheduledTime.Minute, 0);
        requestSchedule.Districts = SelectedDistricts.ToList();

        switch (reportRequestType){
            case ReportRequestType.SurveyReport:
                if (SurveyRequest is null) throw new NullReferenceException();

                //Если отчет без расписания - сразу создаем назначение, иначе - его создаст ScheduleService
                if (SurveyRequest.IsSchedulledRequest) SurveyRequest.ReportSchedule = requestSchedule;
                //else {
                //    SurveyRequest.NonScheduledDeadline = nonScheduledDeadline;
                //    AssignmentService.AddAssignmentsRange(SurveyRequest, selectedDistricts.Select(distr => distr.ReportUser), nonScheduledDeadline:);
                //}

                AssignmentService.AddAssignmentsRange(SurveyRequest, SelectedDistricts.Select(distr => distr.ReportUser), nonScheduledDeadline);

                ReportRequestService.CreateReportRequestSurvey(SurveyRequest);
                break;

            case ReportRequestType.TextOnlyReport:
                if (TextRequest is null) throw new NullReferenceException();

                if (TextRequest.IsSchedulledRequest) TextRequest.ReportSchedule = requestSchedule;
                //else{
                //    TextRequest.NonScheduledDeadline = nonScheduledDeadline;
                //    AssignmentService.AddAssignmentsRange(TextRequest, selectedDistricts.Select(distr => distr.ReportUser));
                //}

                AssignmentService.AddAssignmentsRange(TextRequest, SelectedDistricts.Select(distr => distr.ReportUser), nonScheduledDeadline);

                ReportRequestService.CreateReportRequestText(TextRequest);
                break;
            case ReportRequestType.FileReport:
                if (FileRequest is null) throw new NullReferenceException();

                if (FileRequest.IsSchedulledRequest) FileRequest.ReportSchedule = requestSchedule;

                AssignmentService.AddAssignmentsRange(FileRequest, SelectedDistricts.Select(distr => distr.ReportUser), nonScheduledDeadline);

                ReportRequestService.CreateReportRequestwithFile(FileRequest);

                break;

        }

        // Вывести сообщение и перенаправить на список заданий
           var closed = await DialogService.OpenAsync("Запрос назначен", ds =>
                    @<div>
                            <div class="row">
                                <div class="col">
                                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;" />
                                </div>
                            </div>
     </div>
    , new DialogOptions(){ShowClose = false});

        if (closed) NavigationManager.NavigateTo("reportrequestslist");
    }

    protected override async Task OnInitializedAsync()
    {
        Districts = await DistrictService.GetDistrictsWithUsersAsync();
    }


    void OnStepChange(int index)
    {
        var a = nonScheduledDeadline;
    }
}
