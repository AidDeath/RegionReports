@page "/createreportrequest"
@using RegionReports.Enums
@using System.Text.Json
@inject ReportRequestService ReportRequestService
@inject FileService FileService
@inject NotificationService NotificationService
@inject SettingsService SettingsService


<PageTitle>Новый запрос данных</PageTitle>

<RadzenSteps Change="OnStepChange" NextText="Далее" PreviousText="Назад" >
    <Steps>
        <RadzenStepsItem Text="Выбор вида запроса">
            <RadzenDropDown TValue="KeyValuePair<int, string>" Placeholder="Вид отчета" Data="@DropDownText" TextProperty="Value" 
            SelectedItemChanged="@DropDownChanged"/>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Данные запроса">
            @switch (reportRequestType)
            {
                //Выбран тип отчета - опрос
                case ReportRequestType.SurveyReport:
                    @if (SurveyRequest is not null)
                    {
                        <RadzenCard >
                            <div class="row">
                                <div class="col-md-6 col-lg-6">
                                @*Шапка опроса*@
                                <RadzenCard >
                                    <div class="row">
                                        <div>
                                            <h4 class="mb-3">Текст запроса: </h4>
                                            <RadzenTextArea class="w-100" @bind-Value=@SurveyRequest.Question Rows="7" MaxLength="500"/>
                                        </div>
                                        <div class=row>
                                            <div class=col><h5>Выбор нескольких вариантов</h5></div>
                                            <div class=col><RadzenSwitch class=align-top @bind-Value=@SurveyRequest.MultipleChoises/></div>
                                        </div>                                  
                                    </div>
                                
                                </RadzenCard>
                                </div>

                                <div class="col-md-6 col-lg-6">
                                @*Опции опроса*@
                                <RadzenCard>
                                    <div class="p-1">
                                        <h4 class="mb-3">Варианты ответа</h4>
                                        @foreach (var opt in SurveyRequest.Options)
                                        {
                                            <div class="row mb-1">
                                                <div class="col-2"><RadzenIcon Icon="task_alt"></RadzenIcon> </div>
                                                <div class="col-8">@opt.OptionName</div>
                                                <div class="col-2"><RadzenButton Icon="delete_forever" Click="@(() => SurveyRequest.Options.Remove(opt))"/></div>
                                            </div>
                                        }
                                        @if (isAddOptionButtonVisible)
                                        {
                                            <div class="row">
                                                <div class="col-2"><RadzenIcon Icon="add"></RadzenIcon> </div>
                                                <RadzenButton class="col-10" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="Добавить вариант" Click=@(() => isAddOptionButtonVisible = false)/>  
                                            </div>
                                        }
                                        else
                                        {
                                            <RadzenTemplateForm TItem ="ReportRequestSurveyOption" Data="@inputtingOption"  Submit="AddSurveyOption">
                                                    <RadzenTextBox Placeholder="Текст варианта ответа" Name="TextBox" @bind-Value=@inputtingOption.OptionName/>
                                                    <RadzenButton ButtonType="ButtonType.Submit" Icon="check"/>
                                                    <RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Warning" Click=@(() => isAddOptionButtonVisible = true)/>

                                                <div class="row">
                                                    <RadzenRequiredValidator Text="Нужно ввести вариант ответа" Component="TextBox"/> 
                                                </div>
                                            </RadzenTemplateForm>

                                        }
                                    </div>
                                </RadzenCard>
                                </div>
                            </div>
                            @*<RadzenButton Text="Сохранить" Click="@( () => AddRequestSurvey())"/>*@
                        </RadzenCard>
                    }
                    break;
                //Выбран тип отчета - Простой текстовый
                case ReportRequestType.TextOnlyReport:
                    <RadzenCard >
                         <div class="row">
                             <div class="col-sm-6 col-md-7 col-lg-8">
                                <RadzenLabel Text="Заголовок" Component="ReportRequestTitle"/>
                                <RadzenTextBox Name="ReportRequestTitle" @bind-Value="@TextRequest.RequestTitle"/>
                                 <h3>Текст запроса информации</h3>
                                <RadzenHtmlEditor @bind-Value="@TextRequest.RequestText" style="height: 400px; margin-bottom: 1rem;" Change=@OnChange Paste=@OnPaste Execute=@OnExecute>
                                    <RadzenHtmlEditorUndo Title="Отменить"/>
                                    <RadzenHtmlEditorRedo Title="Повторить"/>
                                    <RadzenHtmlEditorFontName Title="Шрифт"/>
                                    <RadzenHtmlEditorFontSize Title="Размер шрифта"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorAlignLeft Title="По левому краю"/>
                                    <RadzenHtmlEditorAlignCenter Title="По центру"/>
                                    <RadzenHtmlEditorAlignRight Title="По правому краю"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorBold Title="Жирный"/>
                                    <RadzenHtmlEditorItalic Title="Курсив"/>
                                    <RadzenHtmlEditorUnderline Title="Подчеркнутый"/>
                                    <RadzenHtmlEditorStrikeThrough Title="Зачеркнутый"/>
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor Title="Цвет шрифта"/>
                                    <RadzenHtmlEditorBackground Title="Заливка"/>
                                    <RadzenHtmlEditorRemoveFormat Title="Очистить форматирование" />
                                </RadzenHtmlEditor>
                             </div>

                                 <div class="col-sm-6 col-md-5 col-lg-4">
                                     <h4>Прикрепленные файлы</h4>
                                     @if (@TextRequest.Files is not null)
                                        @foreach(var file in @TextRequest.Files)
                                        {
                                            <p>
                                                <RadzenButton class="m-1" Icon="delete" Click="@(() => RemoveFile(file))"/>
                                                <FileIcon FileType="@((UploadedFileType)file.FileType)"/>
                                               @file.FileOriginalName
                                            </p>
                                        }

                                    <RadzenUpload @ref="@upload" Url="upload/multiple"  ChooseText="Добавить файлы" Multiple=true Complete="@OnUploadComplete" Progress="@OnProgress" Visible=@(!progressVisible)
                                    Accept="@SettingsService.GetUploadableMimeTypes()" Error="@OnUploadError"/>
@*                                    Accept="application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/pdf"/>
*@                         
                                    <RadzenProgressBar Visible="@progressVisible" Value="@uploadProgress"/>
                                </div>

                            
                            </div>
                    </RadzenCard>
                    break;
                //Выбран тип отчета - Запрос с файлом шаблона
                case ReportRequestType.TextWithFileReport:
                    break;
                default:
                    break;
            }
        </RadzenStepsItem>
        <RadzenStepsItem Text="Назначение исполнителей">

        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code {

    private ReportRequestType reportRequestType { get; set; }

    private static Dictionary<int, string> DropDownText = new Dictionary<int, string>
    {
        {(int)ReportRequestType.TextOnlyReport, "Запрос текстовой информмации"},
        {(int)ReportRequestType.TextWithFileReport, "Запрос информации с файлом-шаблоном"},
        {(int)ReportRequestType.SurveyReport, "Опрос"}
    };

    private void DropDownChanged(object selectedEntry)
    {
        var SelectedIntex = ((KeyValuePair<int, string>)selectedEntry).Key;
        reportRequestType = (ReportRequestType)SelectedIntex;

        if (reportRequestType == ReportRequestType.SurveyReport)
            SurveyRequest = new(){ Options = new()};

        if (reportRequestType == ReportRequestType.TextOnlyReport)
            TextRequest = new() { Files = new() };

    }

    #region Survey
    private bool isAddOptionButtonVisible { get; set; } = true;
    private ReportRequestSurvey SurveyRequest { get; set; }  = new() { Options = new() };
    private ReportRequestSurveyOption inputtingOption { get; set; } = new();


    /// <summary>
    /// Добавить новую опцию в запрос отчета-опроса
    /// </summary>
    /// <param name="newOption"></param>
    private void AddSurveyOption(ReportRequestSurveyOption newOption)
    {
        SurveyRequest?.Options.Add(new ReportRequestSurveyOption(){OptionName = newOption.OptionName});
        inputtingOption.OptionName = string.Empty;
        isAddOptionButtonVisible = true;
    }

    private void AddRequestSurvey()
    {
        ReportRequestService.CreateReportRequestSurvey(SurveyRequest);
    }
    #endregion


    #region Text
    private ReportRequestText TextRequest { get; set; } = new() { Files = new() };
    private RadzenUpload upload = new();
    private double uploadProgress;
    private bool progressVisible;

    private void OnProgress(UploadProgressArgs args)
    {
        if (args.Progress != 100) {
            progressVisible = true;
            uploadProgress = args.Progress;
        }

    }

    private void OnUploadComplete(UploadCompleteEventArgs args)
    {
        JsonDocument jsonDocument = args.JsonResponse;

        var uploadedFiles = jsonDocument.RootElement.Deserialize<List<ReportRequestFile>> ();

        if (uploadedFiles is not null && TextRequest.Files is not null)
            TextRequest.Files.AddRange(uploadedFiles);

        upload.ClearFiles();
        progressVisible = false;

        NotificationService.Notify(NotificationSeverity.Success, "Файлы загружены");
    }


    private void OnUploadError(UploadErrorEventArgs args){
        NotificationService.Notify(NotificationSeverity.Error, "Ошибка при загрузке", args.Message);

        upload.ClearFiles();
        progressVisible = false;
    }

    /// <summary>
    /// Удалить файл из списка и с сервера
    /// </summary>
    /// <param name="file"></param>
    private void RemoveFile(ReportRequestFile file)
    {
        if (TextRequest.Files is not null) TextRequest.Files.Remove(file);

        FileService.DeleteFileFromFileSystem(file);

        NotificationService.Notify(NotificationSeverity.Info, "Файл удален");
    } 


    #endregion


    void OnChange(string html)
    {
        var a = html;
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        var a = args.CommandName;
    }

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        var a = args.Html;
    }

    void Click(){
        
    }

    void OnStepChange(int index)
    {
        var a = $"Step with index {index} was selected.";

    }
}
