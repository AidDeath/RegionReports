@page "/createreportrequest"
@using RegionReports.Enums
@using System.Text.Json
@inject ReportRequestService ReportRequestService
@inject FileService FileService
@inject NotificationService NotificationService
@inject SettingsService SettingsService


<PageTitle>Новый запрос данных</PageTitle>

<RadzenSteps Change="OnStepChange" NextText="Далее" PreviousText="Назад" >
    <Steps>
        <RadzenStepsItem Text="Выбор вида запроса">
            <RadzenDropDown TValue="KeyValuePair<int, string>" Placeholder="Вид отчета" Data="@DropDownText" TextProperty="Value" 
            SelectedItemChanged="@DropDownChanged"/>

            <RadzenButton />
        </RadzenStepsItem>
        <RadzenStepsItem Text="Данные запроса">
            @switch (reportRequestType)
            {
                //Выбран тип отчета - опрос
                case ReportRequestType.SurveyReport:
                    @if (SurveyRequest is not null)
                    {
                        <RadzenCard >
                            <div class="row">
                                <div class="col-md-6 col-lg-6">
                                @*Шапка опроса*@
                                <RadzenCard >
                                    <div class="row">
                                        <div>
                                            <h4 class="mb-3">Текст запроса: </h4>
                                            <RadzenTextArea class="w-100" @bind-Value=@SurveyRequest.Question Rows="7" MaxLength="500"/>
                                        </div>
                                        <div class=row>
                                            <div class=col><h5>Выбор нескольких вариантов</h5></div>
                                            <div class=col><RadzenSwitch class=align-top @bind-Value=@SurveyRequest.MultipleChoises/></div>
                                        </div>                                  
                                    </div>
                                
                                </RadzenCard>
                                </div>

                                <div class="col-md-6 col-lg-6">
                                @*Опции опроса*@
                                <RadzenCard>
                                    <div class="p-1">
                                        <h4 class="mb-3">Варианты ответа</h4>
                                        @foreach (var opt in SurveyRequest.Options)
                                        {
                                            <div class="row mb-1">
                                                <div class="col-2"><RadzenIcon Icon="task_alt"></RadzenIcon> </div>
                                                <div class="col-8">@opt.OptionName</div>
                                                <div class="col-2"><RadzenButton Icon="delete_forever" Click="@(() => SurveyRequest.Options.Remove(opt))"/></div>
                                            </div>
                                        }
                                        @if (isAddOptionButtonVisible)
                                        {
                                            <div class="row">
                                                <div class="col-2"><RadzenIcon Icon="add"></RadzenIcon> </div>
                                                <RadzenButton class="col-10" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="Добавить вариант" Click=@(() => isAddOptionButtonVisible = false)/>  
                                            </div>
                                        }
                                        else
                                        {
                                            <RadzenTemplateForm TItem ="ReportRequestSurveyOption" Data="@inputtingOption"  Submit="AddSurveyOption">
                                                    <RadzenTextBox Placeholder="Текст варианта ответа" Name="TextBox" @bind-Value=@inputtingOption.OptionName/>
                                                    <RadzenButton ButtonType="ButtonType.Submit" Icon="check"/>
                                                    <RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Warning" Click=@(() => isAddOptionButtonVisible = true)/>

                                                <div class="row">
                                                    <RadzenRequiredValidator Text="Нужно ввести вариант ответа" Component="TextBox"/> 
                                                </div>
                                            </RadzenTemplateForm>

                                        }
                                    </div>
                                </RadzenCard>
                                </div>
                            </div>
                            @*<RadzenButton Text="Сохранить" Click="@( () => AddRequestSurvey())"/>*@
                        </RadzenCard>
                    }
                    break;
                //Выбран тип отчета - Простой текстовый запрос с возможностью прикрепить файл
                case ReportRequestType.TextOnlyReport:
                    <RadzenCard >
                         <div class="row">
                             <div class="col-sm-6 col-md-7 col-lg-8">
                                <RadzenLabel Text="Заголовок" Component="ReportRequestTitle"/>
                                <RadzenTextBox Name="ReportRequestTitle" @bind-Value="@TextRequest.RequestTitle"/>
                                 <h3>Текст запроса информации</h3>
                                <RadzenHtmlEditor @bind-Value="@TextRequest.RequestText" style="height: 400px; margin-bottom: 1rem;" Change=@OnChange Paste=@OnPaste Execute=@OnExecute>
                                    <RadzenHtmlEditorUndo Title="Отменить"/>
                                    <RadzenHtmlEditorRedo Title="Повторить"/>
                                    <RadzenHtmlEditorFontName Title="Шрифт"/>
                                    <RadzenHtmlEditorFontSize Title="Размер шрифта"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorAlignLeft Title="По левому краю"/>
                                    <RadzenHtmlEditorAlignCenter Title="По центру"/>
                                    <RadzenHtmlEditorAlignRight Title="По правому краю"/>
                                    <RadzenHtmlEditorSeparator/>
                                    <RadzenHtmlEditorBold Title="Жирный"/>
                                    <RadzenHtmlEditorItalic Title="Курсив"/>
                                    <RadzenHtmlEditorUnderline Title="Подчеркнутый"/>
                                    <RadzenHtmlEditorStrikeThrough Title="Зачеркнутый"/>
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor Title="Цвет шрифта"/>
                                    <RadzenHtmlEditorBackground Title="Заливка"/>
                                    <RadzenHtmlEditorRemoveFormat Title="Очистить форматирование" />
                                </RadzenHtmlEditor>
                             </div>

                                 <div class="col-sm-6 col-md-5 col-lg-4">
                                     <h4>Прикрепленные файлы</h4>
                                     @if (@TextRequest.Files is not null)
                                        @foreach(var file in @TextRequest.Files)
                                        {
                                            <p>
                                                <RadzenButton class="m-1" Icon="delete" Click="@(() => RemoveFile(file))"/>
                                                <FileIcon FileType="@((UploadedFileType)file.FileType)"/>
                                               @file.FileOriginalName
                                            </p>
                                        }

                                    <RadzenUpload @ref="@upload" Url="upload/multiple"  ChooseText="Добавить файлы" Multiple=true Complete="@OnUploadComplete" Progress="@OnProgress" Visible=@(!progressVisible)
                                    Accept="@SettingsService.GetUploadableMimeTypes()" Error="@OnUploadError"/>
                                    @*Accept="application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/pdf"/>*@                         
                                    <RadzenProgressBar Visible="@progressVisible" Value="@uploadProgress"/>
                                </div>
                            </div>
                    </RadzenCard>
                    break;
                default:
                    break;
            }
        </RadzenStepsItem>
        <RadzenStepsItem Text="Исполнители и расписание">
            <div class="row align-content-center">
                <div class="col-md-6 col-lg-6 align-items-center">
                    <RadzenFieldset Text="Назначение отчёта пользователям">

                    </RadzenFieldset>

                </div>
                <div class="col-md-6 col-lg-6 align-items-center">
                    <RadzenFieldset Text="Периодичность сбора отчета">
                        
                        <RadzenSelectBar TValue="bool" @bind-Value="@isScheduledRequest">
                            <Items>
                                <RadzenSelectBarItem Text="Однократный запрос" Value="false" />
                                <RadzenSelectBarItem Text="Запрос по расписанию" Value="true" />
                            </Items>
                        </RadzenSelectBar>

                        @*Для однократного запроса*@
                        <RadzenCard Visible="@(!isScheduledRequest)">
                            <RadzenLabel Component="NonScheduledCalendar" Text="Дата" />
                            <RadzenDatePicker Name="NonScheduledCalendar" DateRender="@DateRenderNotBeforeToday" class="m-2"  TValue="DateTime" Inline="true" @bind-Value="@nonScheduledDeadline" />
                        
                            <RadzenLabel Component="NonSchedulledDeadline" Text="Время"/>
                            <RadzenDatePicker Name="NonSchedulledDeadline" AllowInput="false" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" TValue="DateTime" @bind-Value="@nonScheduledDeadline"/>
                        </RadzenCard>

                        @*Для запроса с расписанием*@
                        <RadzenCard Visible=@isScheduledRequest>
                            <RadzenAccordion class="m-2"  Expand="@((args) => SheduleTypeSelected(args))">
                                <Items>
                                    <RadzenAccordionItem Text="Ежемесячнно" Icon="calendar_view_month">
                                        <p>
                                        <RadzenLabel Component="DayOfMonthNumericBox" Text="День месяца"/>
                                        <RadzenNumeric Name="DayOfMonthNumericBox" TValue="short?" Min="1" Max="31" Value="@reportSchedule.DayOfMonth" />
                                        </p>
                                        <p>
                                       <RadzenLabel Component="SchedulledTime" Text="Время"/>
                                        <RadzenDatePicker Name="SchedulledTime" AllowInput="false" ShowTime="true" TimeOnly="true" 
                                                DateFormat="HH:mm" TValue="DateTime" @bind-Value="@scheduledTime"/>
                                        </p>
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Еженедельно" Icon="calendar_view_week">
                                        <RadzenLabel Component="DayOfWeekRadioButtons" Text="День недели"/>
                                        <RadzenRadioButtonList Name="DayOfWeekRadioButtons" Orientation="Orientation.Vertical" 
                                                    TValue="short?" @bind-Value="@reportSchedule.DayOfWeek">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Понедельник" Value="(short?)1"/>
                                                <RadzenRadioButtonListItem Text="Вторник" Value="(short?)2"/>
                                                <RadzenRadioButtonListItem Text="Среда" Value="(short?)3"/>
                                                <RadzenRadioButtonListItem Text="Четверг" Value="(short?)4"/>
                                                <RadzenRadioButtonListItem Text="Пятница" Value="(short?)5"/>
                                                <RadzenRadioButtonListItem Text="Суббота" Value="(short?)6"/>
                                                <RadzenRadioButtonListItem Text="Воскресенье" Value="(short?)7"/>
                                            </Items>
                                        </RadzenRadioButtonList>

                                       <RadzenLabel Component="SchedulledTime" Text="Время"/>
                                        <RadzenDatePicker Name="SchedulledTime" AllowInput="false" ShowTime="true" TimeOnly="true" 
                                                DateFormat="HH:mm" TValue="DateTime" @bind-Value="@scheduledTime"/>
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Ежедневно" Icon="calendar_view_day">

                                        <RadzenLabel Component="SchedulledTime" Text="Время"/>
                                        <RadzenDatePicker Name="SchedulledTime" AllowInput="false" ShowTime="true" TimeOnly="true" 
                                                DateFormat="HH:mm" TValue="DateTime" @bind-Value="@scheduledTime"/>
                                    </RadzenAccordionItem>
                                </Items>
                            </RadzenAccordion>
                        </RadzenCard>
                        
                    </RadzenFieldset>
                </div>
            </div>
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code {

    private ReportRequestType reportRequestType { get; set; }

    private static Dictionary<int, string> DropDownText = new Dictionary<int, string>
    {
        {(int)ReportRequestType.TextOnlyReport, "Запрос текстовой информмации"},
        {(int)ReportRequestType.SurveyReport, "Опрос"}
    };

    private void DropDownChanged(object selectedEntry)
    {
        var SelectedIndex = ((KeyValuePair<int, string>)selectedEntry).Key;
        reportRequestType = (ReportRequestType)SelectedIndex;

        if (reportRequestType == ReportRequestType.SurveyReport)
        {
            SurveyRequest = new(){ Options = new()};
            TextRequest = null;
        }


        if (reportRequestType == ReportRequestType.TextOnlyReport)
        {
            TextRequest = new() { Files = new() };
            SurveyRequest = null;
        }



    }

    #region Survey
    private bool isAddOptionButtonVisible { get; set; } = true;
    private ReportRequestSurvey? SurveyRequest { get; set; }
    private ReportRequestSurveyOption inputtingOption { get; set; } = new();


    /// <summary>
    /// Добавить новую опцию в запрос отчета-опроса
    /// </summary>
    /// <param name="newOption"></param>
    private void AddSurveyOption(ReportRequestSurveyOption newOption)
    {
        SurveyRequest?.Options.Add(new ReportRequestSurveyOption(){OptionName = newOption.OptionName});
        inputtingOption.OptionName = string.Empty;
        isAddOptionButtonVisible = true;
    }
    #endregion


    #region Text
    private ReportRequestText? TextRequest { get; set; }
    private RadzenUpload upload = new();
    private double uploadProgress;
    private bool progressVisible;

    private void OnProgress(UploadProgressArgs args)
    {
        if (args.Progress != 100) {
            progressVisible = true;
            uploadProgress = args.Progress;
        }

    }

    private void OnUploadComplete(UploadCompleteEventArgs args)
    {
        JsonDocument jsonDocument = args.JsonResponse;

        var uploadedFiles = jsonDocument.RootElement.Deserialize<List<ReportRequestFile>> ();

        if (uploadedFiles is not null && TextRequest?.Files is not null)
            TextRequest.Files.AddRange(uploadedFiles);

        upload.ClearFiles();
        progressVisible = false;

        NotificationService.Notify(NotificationSeverity.Success, "Файлы загружены");
    }


    private void OnUploadError(UploadErrorEventArgs args){
        NotificationService.Notify(NotificationSeverity.Error, "Ошибка при загрузке", args.Message);

        upload.ClearFiles();
        progressVisible = false;
    }

    /// <summary>
    /// Удалить файл из списка и с сервера
    /// </summary>
    /// <param name="file"></param>
    private void RemoveFile(ReportRequestFile file)
    {
        if (TextRequest?.Files is not null) TextRequest.Files.Remove(file);

        FileService.DeleteFileFromFileSystem(file);

        NotificationService.Notify(NotificationSeverity.Info, "Файл удален");
    }
    #endregion


    #region Scheduller
    // Данные в этих переменных хранятся временно, TODO: переписать в объект при сохранении запроса
    private DateTime nonScheduledDeadline = DateTime.Now.Date.AddDays(1).AddHours(12).AddMinutes(30);

    private DateTime scheduledTime = default(DateTime).AddHours(12).AddMinutes(30);
    private ReportSchedule reportSchedule = new ReportSchedule() {
            DayOfMonth = 1,
            DayOfWeek = 1,
            Time = new TimeSpan(12, 30, 0)
    };

    void DateRenderNotBeforeToday(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date < DateTime.Today;
    }




    //private DateTime nonScheduledDeadline
    //{
    //    get
    //    {
    //        switch (reportRequestType){
    //            case ReportRequestType.SurveyReport:
    //                if (SurveyRequest is null) throw new NullReferenceException();
    //                if (SurveyRequest.NonScheduledDeadline is null) SurveyRequest.NonScheduledDeadline = DateTime.Now.AddDays(1);
    //                return SurveyRequest.NonScheduledDeadline ?? DateTime.Now.AddDays(1).Date;
    //            case ReportRequestType.TextOnlyReport:
    //                if (TextRequest is null) throw new NullReferenceException();
    //                if (TextRequest.NonScheduledDeadline is null) TextRequest.NonScheduledDeadline = DateTime.Now.AddDays(1);
    //                return TextRequest?.NonScheduledDeadline ?? DateTime.Now.AddDays(1).Date; 
    //            default: throw new Exception("Не выбран тип отчета");
    //        }
    //    }

    //    set
    //    {
    //        switch (reportRequestType){
    //            case ReportRequestType.SurveyReport:
    //                if (SurveyRequest is null) throw new NullReferenceException();
    //                SurveyRequest.NonScheduledDeadline = value;
    //                break;

    //            case ReportRequestType.TextOnlyReport:
    //                if (TextRequest is null) throw new NullReferenceException();
    //                TextRequest.NonScheduledDeadline  = value;
    //                break;

    //            default: throw new Exception("Не выбран тип отчета");
    //        }

    //        StateHasChanged();
    //    }
    //}


    //private void OnNonScheduledTimeChanged(DateTime? dateTime)
    //{
    //    if (dateTime is not null)
    //    {
    //        var current = nonScheduledDeadline.Date;
    //        nonScheduledDeadline = current.AddHours(dateTime.Value.Hour).AddMinutes(dateTime.Value.Minute);
    //    }
    //}

    //private void OnScheduledTimeChanged(DateTime? dateTime)
    //{
    //    if (dateTime is not null)
    //    {
    //        var current = nonScheduledDeadline.Date;
    //        current = current.AddHours(dateTime.Value.Hour).AddMinutes(dateTime.Value.Minute);
    //        switch (reportRequestType){
    //            case ReportRequestType.SurveyReport:
    //                if (SurveyRequest?.ReportSchedule is null ) throw new NullReferenceException();
    //                SurveyRequest.ReportSchedule.Time = new TimeSpan(current.Hour, current.Second, 0);
    //                break;

    //            case ReportRequestType.TextOnlyReport:
    //                if (TextRequest?.ReportSchedule is null ) throw new NullReferenceException();
    //                TextRequest.ReportSchedule.Time = new TimeSpan(current.Hour, current.Second, 0);
    //                break;

    //            default: throw new Exception("Не выбран тип отчета");
    //        }

    //    }
    //}


    private bool isScheduledRequest {
        get {
            switch (reportRequestType){
                case ReportRequestType.SurveyReport:
                    return SurveyRequest?.IsSchedulledRequest ?? throw new NullReferenceException();
                case ReportRequestType.TextOnlyReport:
                    return TextRequest?.IsSchedulledRequest ?? throw new NullReferenceException();
                default: throw new Exception("Не выбран тип отчета");
            }
        }
        set
        {
            switch (reportRequestType){
                case ReportRequestType.SurveyReport:
                    if (SurveyRequest is null) throw new NullReferenceException();
                    SurveyRequest.IsSchedulledRequest = value;
                    break;

                case ReportRequestType.TextOnlyReport:
                    if (TextRequest is null) throw new NullReferenceException();
                    TextRequest.IsSchedulledRequest = value;
                    break;

                default: throw new Exception("Не выбран тип отчета");
            }
        }
    }


    private void SheduleTypeSelected(int selectedIndex)
    {
        reportSchedule.ScheduleType = selectedIndex + 1;
    }

    #endregion


    void OnChange(string html)
    {
        var a = html;
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        var a = args.CommandName;
    }

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        var a = args.Html;
    }

    void Click(){

    }

    void OnStepChange(int index)
    {
        //При переходе на вкладку с расписанием и назначениями - проставляем дату выполнения в завтрашнюю
        var a = nonScheduledDeadline;
    }
}
