@page "/reportrequestslist"
@inject AssignmentService AssignmentService
@inject NotificationService NotificationService
@inject DialogService DialogService

@*
    Что здесь должно быть:
    Эт страница, типа управления назначенными отчетами.
    Показываю датагрид с запросами отчетов. В нем будут: 
        - Дата назначения
        - Заготовок отчета
        - Срок отчета, истёк или нет.
        - Скольким пользователям назначен и солько из них выполнили назначение.
        - По расписанию отчет или нет, можно выключить расписание, тогда оно автоматически создаваться не будет.

        - Детали выбранного отчета
        - Изменение расписания и назначения пользователей

        -- Вывод агрегирующего отчета


*@
<PageTitle>Сбор отчетов</PageTitle>
<h3>Прогресс сбора отчетов</h3>

<RadzenDataGrid TItem="ReportAssignmentGroup" AllowPaging="true" Data="@list" PageSize="7">
    <Columns>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Property="DateAssigned" Title="Назначен"/>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Тип запроса">
            <Template Context="data">
                @data.GetRequestTypeName()
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Заголовок">
            <Template Context="data">
                @data.GetReportRequest().RequestTitle
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Расписание">
            <Template Context="data">
                <div class="my-0">
                    @{
                        var request = data.GetReportRequest();
                        if (request.IsSchedulledRequest)
                        {
                            <RadzenButton class="text-wrap" Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(() => ShowScheduleEditDialog(data))"/>
                        }
                        <RadzenLabel class="text-wrap" Text=@request.WhenToCollect()/>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Прогресс сбора">
            <Template Context="data">
                <div>
                    @{
                        var partlyText = $"Сдано {@data.Assignments.Count(asn => asn.IsCompleted)} из {@data.Assignments.Count}";

                        <RadzenProgressBar Max="@data.Assignments.Count" ShowValue="false"  Value="@data.Assignments.Count(asn => asn.IsCompleted)"/>
                    if (data.Assignments.All(asn => asn.IsCompleted)) 
                    {
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Выполнено"/>
                    }
                    else
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@partlyText"/>
                    }
                 }
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    IEnumerable<ReportAssignmentGroup> list;

    private ReportRequestBase request(ReportAssignmentGroup asnGroup) => asnGroup.GetReportRequest();

    protected override void OnInitialized()
    {
        list = AssignmentService.GetAssignmentGroups();
    }

    private async Task ShowScheduleEditDialog(ReportAssignmentGroup asnGroup)
    {
        var tempSchedule = new ReportSchedule()
        {
            DayOfMonth=1,
            DayOfWeek=1
        };
        DateTime scheduledTime = new DateTime().AddHours(16);
        bool isScheduleActive = true;

        var result = await DialogService.OpenAsync("Задать новое расписание", dialog =>
        @<RadzenCard>
            <div>
                <RadzenLabel Component="switch" Text="Расписание включено"/>    
                <RadzenSwitch Name="switch" @bind-Value="@isScheduleActive"/>
            </div>
            @if (isScheduleActive)
                {
                    <ScheduleSettings RequestSchedule="@tempSchedule" ScheduledTime="@scheduledTime"/>
                }

            
            <div>
                <RadzenButton Text="Сохранить" Click="@(() => dialog.Close(true))"/>
                <RadzenButton Text="Отмена" ButtonStyle="ButtonStyle.Secondary" Click="@(() => dialog.Close(false))" />
            </div>

        </RadzenCard>
    , new DialogOptions(){ShowClose=false} 
    );


        if (result)
        {
            var schedule = asnGroup.GetReportRequest().ReportSchedule;

            if (!isScheduleActive)
            {
                schedule.IsScheduleActive = false;
            }
            else
            {
                if (tempSchedule.ScheduleType == 0)
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Расписание не сохранено!", "Не выбран тип расписания");
                    return;
                }

                schedule.ScheduleType = tempSchedule.ScheduleType;
                schedule.DayOfMonth = tempSchedule.DayOfMonth;
                schedule.DayOfWeek = tempSchedule.DayOfWeek;
                schedule.DaysBeforeAutoAssignment = tempSchedule.DaysBeforeAutoAssignment;
                schedule.Time = scheduledTime.TimeOfDay;
                schedule.IsScheduleActive = tempSchedule.IsScheduleActive;
            }

            AssignmentService.UpdateSchedule(schedule);
            //AssignmentService.UpdateAssignment(asnGroup);
            StateHasChanged();
            if (result) NotificationService.Notify(NotificationSeverity.Success, "Расписание изменено");
        }

        
    }


}
