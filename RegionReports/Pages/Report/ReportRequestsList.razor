@page "/reportrequestslist"
@inject AssignmentService AssignmentService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject DistrictService DistrictService; 

@*
    Что здесь должно быть:
    Эт страница, типа управления назначенными отчетами.
    Показываю датагрид с запросами отчетов. В нем будут: 
        - Дата назначения
        - Заготовок отчета
        - Срок отчета, истёк или нет.
        - Скольким пользователям назначен и солько из них выполнили назначение.
        - По расписанию отчет или нет, можно выключить расписание, тогда оно автоматически создаваться не будет.

        - Изменение расписания и назначения пользователей


*@
<PageTitle>Управленеие текущим сбором отчетности</PageTitle>
<h3>Управление отчетами</h3>

<RadzenDataGrid TItem="ReportAssignmentGroup" AllowPaging="true" Data="@list" PageSize="5" EmptyText="Нет назначений для отображения">
    <Columns>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Property="DateAssigned" Title="Назначен"/>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Тип запроса">
            <Template Context="data">
                <RadzenButton Icon="info" Click="(() =>ShowRequestInfo(data) )" ButtonStyle="ButtonStyle.Light"/>
                @data.GetRequestTypeName()
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Заголовок">
            <Template Context="data">
                @data.GetReportRequest().RequestTitle
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Расписание" Width="300px">
            <Template Context="data">
                <div class="my-0">
                    @{
                        var request = data.GetReportRequest();
                        var btnText = request.WhenToCollect();
                        if (request.IsSchedulledRequest)
                        {
                                <RadzenButton class="text-wrap" Style="font-size:smaller" Icon="pending_actions" ButtonStyle="ButtonStyle.Secondary" 
                            Click="@(() => ShowScheduleEditDialog(data))" Text="@btnText"/>
                        }
                        //<RadzenLabel class="text-wrap" Text=@request.WhenToCollect()/>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Респонденты">
            <Template Context="data">
                @{
                    var request = data.GetReportRequest();
                    if (request.IsSchedulledRequest)
                    {
                        var assignedDistricts = request.ReportSchedule.Districts;
                        var btnText = $"{assignedDistricts.Count} назначено" ;
                            <RadzenButton Icon="person" Text="@btnText" Click="@(() => ShowDistrictsListEditDialog(data))"/>
                    }
                    else
                    {
                            <p> @data.Assignments.Count назначено</p>
                    }

                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ReportAssignmentGroup" Title="Прогресс сбора">
            <Template Context="data">
                <div>
                    @{
                        var partlyText = $"Сдано {@data.Assignments.Count(asn => asn.IsCompleted)} из {@data.Assignments.Count}";

                            <RadzenProgressBar Max="@data.Assignments.Count" ShowValue="false"  Value="@data.Assignments.Count(asn => asn.IsCompleted)"/>
                    if (data.Assignments.All(asn => asn.IsCompleted)) 
                    {
                                <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Выполнено"/>
                    }
                    else
                    {
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@partlyText"/>
                    }
                 }
                </div>
                <div><RadzenButton Text="Завершить сбор" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger"/></div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


<div class="alert-warning my-1">Измененные параметры будут использованы при следующем автоматическом назначении отчета</div>

@code {

    IEnumerable<ReportAssignmentGroup> list;

    private ReportRequestBase request(ReportAssignmentGroup asnGroup) => asnGroup.GetReportRequest();

    protected override void OnInitialized()
    {
        list = AssignmentService.GetActualAssignmentGroups();
    }

    //Задать новое расписание
    private async Task ShowScheduleEditDialog(ReportAssignmentGroup asnGroup)
    {
        var tempSchedule = new ReportSchedule()
        {
            DayOfMonth=1,
            DayOfWeek=1
        };
        DateTime scheduledTime = new DateTime().AddHours(16);
        bool isScheduleActive = true;

        var result = await DialogService.OpenAsync("Задать новое расписание", dialog =>
    @<RadzenCard>
                <div>
                    <RadzenLabel Component="switch" Text="Расписание включено"/>    
                    <RadzenSwitch Name="switch" @bind-Value="@isScheduleActive"/>
                </div>
                @if (isScheduleActive)
                {
                        <ScheduleSettings RequestSchedule="@tempSchedule" @bind-ScheduledTime=@scheduledTime/>
                }

                
                <div>
                    <RadzenButton Text="Сохранить" Click="@(() => dialog.Close(true))"/>
                    <RadzenButton Text="Отмена" ButtonStyle="ButtonStyle.Secondary" Click="@(() => dialog.Close(false))" />
                </div>

    </RadzenCard>
    , new DialogOptions(){ShowClose=false} 
    );


        if (result)
        {
            var schedule = asnGroup.GetReportRequest().ReportSchedule;

            if (!isScheduleActive)
            {
                schedule.IsScheduleActive = false;
            }
            else
            {
                if (tempSchedule.ScheduleType == 0)
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Расписание не сохранено!", "Не выбран тип расписания");
                    return;
                }

                schedule.ScheduleType = tempSchedule.ScheduleType;
                schedule.DayOfMonth = tempSchedule.DayOfMonth;
                schedule.DayOfWeek = tempSchedule.DayOfWeek;
                schedule.DaysBeforeAutoAssignment = tempSchedule.DaysBeforeAutoAssignment;
                schedule.Time = scheduledTime.TimeOfDay;
                schedule.IsScheduleActive = tempSchedule.IsScheduleActive;
            }

            AssignmentService.UpdateSchedule(schedule);

            StateHasChanged();
            if (result) NotificationService.Notify(NotificationSeverity.Success, "Расписание изменено");
        }


    }

    //Изменение пользователей для назначения
    private async Task ShowDistrictsListEditDialog(ReportAssignmentGroup asnGroup)
    {
        var assignedDistricts = asnGroup.GetReportRequest().ReportSchedule.Districts;

        IList<District> SelectedDistricts = assignedDistricts;

        IEnumerable<District> Districts = await DistrictService.GetDistrictsWithUsersAsync();

        RadzenDataGrid<District> districtsDataGrid;

        //assignedDistricts.ForEach(d => SelectedDistricts.Add(d));

       var result = await DialogService.OpenAsync("Выбор пользователей", ds =>
    @<RadzenCard>
                    <RadzenDataGrid @ref="districtsDataGrid" AllowRowSelectOnRowClick="true" 
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="8"
                                AllowSorting="true" Data="@Districts" TItem="District" ColumnWidth="200px"
                                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@SelectedDistricts>
                        <Columns>
                            <RadzenDataGridColumn TItem="District" Width="40px" Sortable="false" Filterable="false">
                                <HeaderTemplate>
                                    <RadzenCheckBox TriState="false" TValue="bool" 
                                    Value="@(Districts.Any(i => SelectedDistricts != null && SelectedDistricts.Contains(i)))"
                                    Change="@(args => {SelectedDistricts = args ? Districts.ToList() : null;})" />
                                </HeaderTemplate>
                                <Template Context="data">
                                    <RadzenCheckBox TriState="false" Value="@(SelectedDistricts != null && SelectedDistricts.Contains(data))" 
                                    TValue="bool"/>
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="District" Property="DistrictName" Title="Район"  SortOrder="SortOrder.Ascending"/>
                            <RadzenDataGridColumn TItem="District" Property="ReportUser.FullName" Title="Представитель" />
                        </Columns>
                    </RadzenDataGrid>
                    <div>
                    <RadzenButton Text="Сохранить" Click="@(() => ds.Close(true))" Disabled="@(SelectedDistricts is null)"/>
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Отмена" Click="@(() => ds.Close(false))"/>
                    </div>
    </RadzenCard>
     );

        if (result)
        {
            asnGroup.GetReportRequest().ReportSchedule.Districts = SelectedDistricts.ToList();
            AssignmentService.UpdateAssignmentGroup(asnGroup);
        }
        
    }

    private async Task ShowRequestInfo(ReportAssignmentGroup asnGroup)
    {       
        ReportRequestBase request = null;

        //if (assignment.ReportRequestText is not null) request = assignment.ReportRequestText;
        //if (assignment.ReportRequestSurvey is not null) request = assignment.ReportRequestSurvey;
        request = asnGroup.GetReportRequest();

        if (request is null) throw new NullReferenceException();

        await DialogService.OpenAsync("Информация о запросе", ds =>
            @<ReportRequestInfo ReportRequest=request/>
            , new(){ShowClose=true, CloseDialogOnEsc=true, CloseDialogOnOverlayClick=true, Draggable=true}
                    );
    } 

}
